# -*- coding: utf-8 -*-
"""
Plotting Script for the N-Sweep IB Verification Experiment

This script loads the raw data generated by `n_sweep_ib_verifier.py`
and creates a final, publication-quality figure with two subplots:

1.  A normalized trajectory plot in the (H'_tse, H'_sie) Semantic State Space
    to clearly visualize the shape of the Information Bottleneck curve.
2.  An evolution plot of the normalized entropy values against the N-Sweep
    step to show the raw, unsmoothed dynamics of the metrics.
"""
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import minmax_scale
import numpy as np
import json

def plot_ib_trajectory_from_n_sweep(json_path, figure_filename):
    """Loads and plots the results from the N-Sweep experiment."""
    try:
        with open(json_path, 'r') as f:
            results_data = json.load(f)
    except FileNotFoundError:
        print(f"Error: The file '{json_path}' was not found.")
        print("Please run the `n_sweep_ib_verifier.py` script first to generate the raw data.")
        return

    if not results_data:
        print("Error: The results file is empty.")
        return

    df = pd.DataFrame(results_data)

    # --- Data Preparation ---
    df['htse_norm'] = minmax_scale(df['final_htse'])
    df['hsie_norm'] = minmax_scale(df['final_hsie'])
    df['step'] = range(len(df))

    # --- Visualization ---
    sns.set_style("whitegrid")
    fig, axes = plt.subplots(1, 2, figsize=(22, 10))
    fig.suptitle('IB Dynamics Revealed by N-Sweep: A Cognitive Economy Perspective', fontsize=22, y=0.98)

    # --- Plot 1: Trajectory in Normalized Semantic State Space ---
    ax1 = axes[0]
    points = ax1.scatter(df['htse_norm'], df['hsie_norm'], 
                         c=df['step'], 
                         cmap='viridis', s=80, ec='black', lw=0.5, zorder=2)
    
    ax1.plot(df['htse_norm'], df['hsie_norm'], color='grey', alpha=0.7, zorder=1)

    cbar = fig.colorbar(points, ax=ax1)
    cbar.set_label('N-Sweep Step', fontsize=14)
    ax1.set_xlabel("Normalized Cognitive Cost ($H'_{tse}$) $\\rightarrow$", fontsize=16)
    ax1.set_ylabel("Normalized Semantic Robustness ($H'_{sie}$) $\\rightarrow$", fontsize=16)
    ax1.set_title('1. Fine-Tuning Trajectory (Normalized)', fontsize=18, pad=15)
    
    # Annotate start, end, and turning point
    ax1.plot(df['htse_norm'].iloc[0], df['hsie_norm'].iloc[0], 'o', color='blue', markersize=15, label='Start (N increases)', zorder=4)
    turning_point_idx = df['hsie_norm'].idxmax()
    ax1.plot(df['htse_norm'].iloc[turning_point_idx], df['hsie_norm'].iloc[turning_point_idx], 'o', color='red', markersize=15, label='Turning Point (Compression Starts)', zorder=4)
    ax1.legend(fontsize=12)
    ax1.grid(True, which='both', linestyle='--', linewidth=0.5)

    # --- Plot 2: Normalized Entropy Evolution Over N-Sweep Steps (RAW DATA) ---
    ax2 = axes[1]
    
    steps = df['step'].values

    # Plot the raw, unsmoothed data with markers
    ax2.plot(steps, df['htse_norm'], color='darkgreen', lw=2, marker='o', markersize=5, label="$H'_{tse}$ (Normalized, Raw Data)")
    ax2.plot(steps, df['hsie_norm'], color='darkblue', lw=2, marker='o', markersize=5, label="$H'_{sie}$ (Normalized, Raw Data)")
    
    # Mark the compression start
    ax2.axvline(x=turning_point_idx, color='red', linestyle='--', label=f'Compression Starts (Step {turning_point_idx})')

    ax2.set_xlabel('N-Sweep Step (Model Capacity N increases then decreases)', fontsize=16)
    ax2.set_ylabel('Normalized Entropy Value', fontsize=16)
    ax2.set_title('2. Normalized Entropy Evolution (Raw)', fontsize=18, pad=15)
    ax2.legend(fontsize=12)
    ax2.grid(True, which='both', linestyle='--', linewidth=0.5)

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    
    plt.savefig(figure_filename, dpi=300)
    print(f"\nSummary plot saved to: {figure_filename}")
    
    plt.show()

if __name__ == '__main__':
    # Ensure this path points to the JSON file generated by `n_sweep_ib_verifier.py`
    json_results_path = "n_sweep_ib_results.json" 
    output_figure_path = "n_sweep_ib_summary_plot1.png"
    plot_ib_trajectory_from_n_sweep(json_results_path, output_figure_path)

